import os
import openai
from flask import Flask, jsonify, request

app = Flask(__name__)

# ‡πÉ‡∏ä‡πâ API Key ‡∏à‡∏≤‡∏Å Environment Variables
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route('/generate_prompt/<category>', methods=['GET'])
def generate_prompt(category):
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL
        model_type = request.args.get('model', 'Runway')  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Runway ‡∏´‡∏£‡∏∑‡∏≠ Kling
        lang = request.args.get('lang', 'en')  # ‡∏†‡∏≤‡∏©‡∏≤ (en/th)
        temperature = float(request.args.get('temperature', 0.7))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå (0.0 - 1.0)
        max_tokens = int(request.args.get('max_tokens', 300))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á prompt

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model ‡πÅ‡∏•‡∏∞ prompt ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not model_type:
            return jsonify({"error": "Missing required argument: 'model'"}), 400

        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ GPT ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt
        prompt_text = f"""
        Generate a highly detailed AI video prompt for {category} in {model_type}.
        The prompt should include:
        - Scene composition
        - Lighting & Atmosphere
        - Cinematic effects
        - Camera movements
        - Aspect ratio, resolution, and frame rate
        """

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OpenAI API
        response = client.chat.completions.create(
            model="gpt-4-turbo",  # ‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            messages=[
                {"role": "system", "content": "You are an AI video prompt generator for cinematic AI models."},
                {"role": "user", "content": prompt_text}
            ],
            temperature=temperature,
            max_tokens=max_tokens
        )

        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        ai_generated_prompt = response.choices[0].message.content.strip()

        # ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ "th"
        thai_translation = ""
        if lang == "th":
            thai_translation = translate_to_thai(ai_generated_prompt)

        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return jsonify({
            "English Prompt for AI": ai_generated_prompt,
            "Thai Explanation for Humans": thai_translation
        }), 200, {'Content-Type': 'application/json; charset=utf-8'}

    except Exception as e:
        return jsonify({"error": str(e)}), 500  # ‡∏™‡πà‡∏á Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

def translate_to_thai(text):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ """
    return f"üîπ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: {text}"  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Google Translate API ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)  # ‡πÉ‡∏ä‡πâ Port 10000 ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
