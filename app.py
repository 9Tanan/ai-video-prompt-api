import os
import sys
import openai
from flask import Flask, jsonify, request

app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Flask ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    print("üö® ERROR: OPENAI_API_KEY is missing! Please set it in environment variables.")
    sys.exit(1)  # ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÉ‡∏´‡πâ OpenAI
openai.api_key = api_key

@app.route('/generate_prompt/<category>', methods=['GET'])
def generate_prompt(category):
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL
        model_type = request.args.get('model', 'Runway')  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Runway ‡∏´‡∏£‡∏∑‡∏≠ Kling
        lang = request.args.get('lang', 'en')  # ‡∏†‡∏≤‡∏©‡∏≤ (en/th)
        temperature = float(request.args.get('temperature', 0.7))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå (0.0 - 1.0)
        max_tokens = int(request.args.get('max_tokens', 300))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á prompt

        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ GPT ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt
        prompt_text = f"""
        Generate a highly detailed AI video prompt for {category} in {model_type}.
        The prompt should include:
        - A cinematic scene description
        - Lighting and atmosphere
        - Camera movements and effects
        Write it in a **concise, clear, and cinematic format** like a **film direction**.
        """

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ GPT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á AI Video Prompt
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[
                    {"role": "system", "content": "You are an AI that generates cinematic video prompts for filmmaking."},
                    {"role": "user", "content": prompt_text}
                ],
                temperature=temperature,
                max_tokens=max_tokens
            )
            ai_generated_prompt = response["choices"][0]["message"]["content"]
        except Exception as e:
            return jsonify({"error": f"‚ùå OpenAI API request failed: {str(e)}"}), 500

        # ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ "th"
        thai_translation = translate_to_thai(ai_generated_prompt) if lang == "th" else ""

        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return jsonify({
            "English Prompt for AI": ai_generated_prompt,
            "Thai Explanation for Humans": thai_translation
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500  # ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

def translate_to_thai(text):
    """‡πÉ‡∏ä‡πâ OpenAI GPT-4 ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Translate the following text into fluent, natural Thai:"},
                {"role": "user", "content": text}
            ],
            temperature=0.3,
            max_tokens=500
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è Translation Error: {str(e)}"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)  # ‡πÉ‡∏ä‡πâ Port 10000
